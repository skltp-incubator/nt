<?xml version="1.0" encoding="utf-8" standalone="no"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation=
              "http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.mulesoft.org/schema/mule/core       http://www.mulesoft.org/schema/mule/core/3.3/mule.xsd
               http://www.mulesoft.org/schema/mule/json       http://www.mulesoft.org/schema/mule/json/3.3/mule-json.xsd
               http://www.mulesoft.org/schema/mule/xml        http://www.mulesoft.org/schema/mule/xml/3.3/mule-xml.xsd">

    <!-- Load property files in three steps... -->

    <!-- 1. Support for decrypting encrypted properties.
The encryption password will be read from an environment variable
called "SOITOOLKIT_ENCRYPTION_PASSWORD" which, once
the application has been started, could be safely unset. -->
    <spring:bean class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig"
                 id="environmentVariablesConfiguration">
        <spring:property name="algorithm" value="PBEWithMD5AndDES"/>
        <spring:property name="passwordEnvName" value="SOITOOLKIT_ENCRYPTION_PASSWORD"/>
    </spring:bean>


    <!-- 2. Support for decrypting encrypted properties -->
    <spring:bean class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor" id="configurationEncryptor">
        <spring:property name="config" ref="environmentVariablesConfiguration"/>
    </spring:bean>


    <!-- 3. Replacement for org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
that supports decrypting encrypted property values -->
    <spring:bean class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer" id="propertyConfigurer">
        <spring:constructor-arg ref="configurationEncryptor"/>
        <spring:property name="ignoreResourceNotFound" value="true"/>
        <spring:property name="locations">
            <spring:list>
                <spring:value>classpath:nt-config.properties</spring:value>
                <spring:value>classpath:nt-config-override.properties</spring:value>
            </spring:list>
        </spring:property>
    </spring:bean>

    <!--
       <management:jmx-default-config port="${JMX_PORT}" registerMx4jAdapter="false" >
           <management:credentials>
               <spring:entry key="${JMX_USER}" value="${JMX_PWD}"/>
           </management:credentials>
       </management:jmx-default-config>
    -->


    <!-- Enable sftp-listener to publish sftp-events. Requires the SftpDummyEndpointMessageNotificationListenerImpl to work... -->
    <spring:bean class="org.soitoolkit.commons.mule.sftp.SftpTransportNotificationListenerImpl"
                 name="sftpTransportNotificationLogger"/>
    <!-- Temporary removed due to http://code.google.com/p/soi-toolkit/issues/detail?id=181
        <spring:bean name="endpointMessageNotificationLogger" class="org.soitoolkit.commons.mule.sftp.SftpDummyEndpointMessageNotificationListenerImpl"/>
    -->
    <notifications>
        <notification event="ENDPOINT-MESSAGE"/>
        <notification event="CUSTOM"/>
        <notification-listener ref="sftpTransportNotificationLogger"/>
        <!-- Temporary removed due to http://code.google.com/p/soi-toolkit/issues/detail?id=181
                <notification-listener ref="endpointMessageNotificationLogger"/>
        -->
    </notifications>


    <!-- The default profile used by normal usage of mule-app, either deployed in mule or started using st-muleServer-helper-class. Not used by integration tests -->
    <spring:beans profile="default">
        <!-- Connectors et al that are specific for different environment specific config-files (local unit-test, integration-test or production environments) -->

        <!-- TODO: Add import of environment specific configuration files here as required -->

        <!-- Import the JMS-provider used in production here, embedded JMS providers used for integration tests are loaded by the *IntegratIonTest.java classes directly -->
        <spring:import resource="classpath:soitoolkit-mule-jms-connector-activemq-external.xml"/>

        <!-- Import the JDBC datasource used in production here, embedded JDBC datasources used for integration tests are loaded by the *IntegratIonTest.java classes directly -->
        <spring:import resource="classpath:soitoolkit-mule-jdbc-datasource.xml"/>


        <!-- Import the SFTP-connector used in production here, embedded SFTP-connector used for integration tests are loaded by the *IntegratIonTest.java classes directly -->
        <spring:import resource="classpath:soitoolkit-mule-sftp-connector-external.xml"/>

        <!-- Dynamic flows -->
        <spring:bean id="initializer" class="se.skltp.nt.intsvc.dynamicFlows.Initializer">
            <spring:property name="configProperties" ref="config-properties-bean"/>
        </spring:bean>

    </spring:beans>


    <!-- Used by integration tests only -->
    <spring:beans profile="soitoolkit-integrationtests">
        <mule>
            <!--  Allow integration tests to register dynamic listeners by specifying dynamic="true" -->
            <notifications dynamic="true">
                <notification event="ENDPOINT-MESSAGE"/>
                <notification event="COMPONENT-MESSAGE"/>
            </notifications>
        </mule>
    </spring:beans>


    <!-- Used by st-muleServer-helper-class only -->
    <spring:beans profile="soitoolkit-teststubs">
        <!-- Load all teststub services -->
        <spring:import resource="classpath:teststub-services/*-teststub-service.xml"/>
    </spring:beans>

    <!-- Common connectors and endpoints, i.e. that not needs to be changed for different config-files (local unit-test, integration-test or production environments) -->

    <spring:beans>
        <spring:import resource="classpath:soitoolkit-mule-http-connector.xml"/>
        <spring:import resource="classpath:soitoolkit-mule-vm-connector.xml"/>
    </spring:beans>

    <message-properties-transformer name="setJsonContentType" scope="outbound">
        <add-message-property key="Content-Type" value="application/json;charset=UTF-8"/>
    </message-properties-transformer>

    <json:object-to-json-transformer name="jaxbToJson"/>

    <!-- The common single jaxb-context for this mule-app -->
    <!-- Don't create additional jaxb-contexts to avoid problems with implicit jaxb transformations that can't resolve what jaxb-context to use! -->
    <!-- Use ":" as a separator if jaxb-objects from more than one java package will be used by the jaxb-transformers  -->
    <mulexml:jaxb-context name="jaxbContext" packageNames="org.soitoolkit.commons.logentry.schema.v1"/>

    <custom-transformer class="org.soitoolkit.commons.mule.core.ObjectToStringTransformer" name="objToStr"/>

    <custom-transformer class="org.soitoolkit.commons.mule.log.correlationid.CreateCorrelationIdTransformer"
                        name="createCorrId"/>
    <custom-transformer class="org.soitoolkit.commons.mule.log.correlationid.SaveCorrelationIdTransformer"
                        name="saveCorrId"/>
    <custom-transformer class="org.soitoolkit.commons.mule.log.correlationid.RestoreCorrelationIdTransformer"
                        name="restoreCorrId"/>

    <custom-transformer class="org.soitoolkit.commons.mule.soap.CreateSoapFaultIfExceptionTransformer"
                        name="createSoapFaultIfException"/>

    <custom-transformer class="org.soitoolkit.commons.mule.mime.MimeToStringTransformer" name="mimeToStr"/>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logMsgIn">
        <spring:property name="logType" value="msg-in"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logMsgOut">
        <spring:property name="logType" value="msg-out"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logReqIn">
        <spring:property name="logType" value="req-in"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logReqOut">
        <spring:property name="logType" value="req-out"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logRespIn">
        <spring:property name="logType" value="resp-in"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <custom-transformer class="org.soitoolkit.commons.mule.log.LogTransformer" name="logRespOut">
        <spring:property name="logType" value="resp-out"/>
        <spring:property name="jaxbContext" ref="jaxbContext"/>
    </custom-transformer>

    <!-- TODO: Add global definitions here -->
    <!-- Subscriber  -->

    <spring:bean id="config-properties-bean" class="se.skltp.nt.svc.impl.ConfigPropertiesImpl">
        <spring:property name="configFiles" value="nt-config,nt-config-override"/>
    </spring:bean>

    <spring:bean id="subscriber-database-bean" class="${SUBSCRIBER_DATABASE_CLASS}">
        <spring:property name="configProperties" ref="config-properties-bean"/>
    </spring:bean>

    <spring:bean id="filter" class="se.skltp.nt.intsvc.MessageFilter">
        <spring:property name="subscriberDatabase" ref="subscriber-database-bean"/>
    </spring:bean>
</mule>
